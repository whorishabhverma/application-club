First negative integer in every window of size k
vector<long long> printFirstNegativeInteger(long long int arr[],
                                             long long int n, long long int k) {
                                                 
        int size = n;
         int i=0,j=0;
         list<long long int> l;
         vector<long long int> vec;
         while(j<size){
            if(arr[j]<0)
                 l.push_back(arr[j]);
            if(j-i+1 < k)
            {
                j++;
            }
            else if(j-i+1 == k)
            {
                vec.push_back(l.front());
                if(arr[i]==l.front())
                    l.pop_front();
                i++;
                j++;
            }
                
                
         }
         return vec;
                                                 
                                                 
                                                 
                                                 
 }
 
 
 
 350. Intersection of Two Arrays II
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        
        
        
        /*
        vector<int> ans;
        for(int i=0;i<nums1.size();i++)
        {
            for(int j=0;j<nums2.size();j++){
                if(nums1[i]==nums2[j]){
                    ans.push_back(nums1[i]);
                    nums2.erase(nums2.begin()+j);
                    break;
                }
            }
        }
        return ans;
        */


    sort(nums1.begin(), nums1.end());
    sort(nums2.begin(), nums2.end());
    vector<int> ans;

        int i = 0 , j = 0;
        int n = nums1.size(), m = nums2.size();
        while(i < n && j < m) {
            if(nums1[i] == nums2[j]){
                ans.push_back(nums1[i]);
                i++;
                j++;
            }
            else if(nums1[i] > nums2[j]) j++;
            else i++;
        }
        return ans;  
    }
};
