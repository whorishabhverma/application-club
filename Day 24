Problem 1: Two sum
https://leetcode.com/problems/two-sum/?fbclid=IwAR0wbMytarDrv8IrWhkA7P_k32xXhjgzmXZqRVPf6RqgWtKH52R_cliZNRQ
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        unordered_map<int,int> mp;
        for(int i=0;i<nums.size();i++){
            if(mp.find(target-nums[i])!= mp.end())
            {
                res.push_back(i);
                res.push_back(mp[target-nums[i]]);
                return res;
            }
            mp[nums[i]]=i;

        }
        return res;
    }
};

Max sum subarray of size k
https://practice.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1?fbclid=IwAR0oSHr47p5GysSaspD3q77ghX039fYG-gPPH1kdNrBd3igAthHKANgBYAk
long maximumSumSubarray(int k, vector<int> &arr , int n){
        // code here 
        
        
        /*
        int maxi=INT_MIN,sum;
        for(int i=0;i<=n-k;i++){
            sum=0;
            for(int j=i;j<(i+k);j++){
                sum+=arr[j];
                
                if(sum>maxi)
                {
                    maxi=max(maxi,sum);
                }
            }
            
        }
        return maxi;
        */
        
        
        
        long int sum=0;
        for(int i=0;i<k;i++){ 
            sum+=arr[i];  }
            long maxi=sum;
            
        for(int i=k;i<n;i++){
            sum=sum+arr[i]-arr[i-k];
            // if(sum>maxi)
            // maxi=sum;
            maxi=max(maxi,sum);
        
        }    
        
        return maxi;
        }
